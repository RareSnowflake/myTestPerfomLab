using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace MyTestPerfLab
{
    class Program
    {
        public static int IsPointInCircle(float[] point, float[] centerCircle, float R)
        {
            double fromCenterToPoint = Math.Sqrt((point[0] - centerCircle[0]) * (point[0] - centerCircle[0]) + (point[1] - centerCircle[1]) * (point[1] - centerCircle[1]));
            if (fromCenterToPoint == R) return 0; //on
            else if (fromCenterToPoint < R) return 1; //inside
            else return 2; //outside
        }


        static void Main(string[] args)
        {
            float[] centerCircle = new float[2];
            float R;

            //file 1
            StreamReader sr1 = new StreamReader(args[0]);
            string text1 = sr1.ReadToEnd();
            char[] separators = {'\n'};
            char[] separatorSpace = { ' ' };
            string[] textSplit1 = text1.Split(separators, StringSplitOptions.RemoveEmptyEntries);

            string[] centerCircleStr = textSplit1[0].Split(' ');
            centerCircle[0] = float.Parse(centerCircleStr[0]);
            centerCircle[1] = float.Parse(centerCircleStr[1]);

            R = float.Parse(textSplit1[1]);

            //file2
            StreamReader sr2 = new StreamReader(args[1]);
            string text2 = sr2.ReadToEnd();
            string[] textSplit2 = text2.Split(separators, StringSplitOptions.RemoveEmptyEntries);

            float[][] points = new float[textSplit2.Length][];

            for (int i = 0; i < textSplit2.Length; i++)
            {
                string[] pointStr = textSplit2[i].Split(separatorSpace, StringSplitOptions.RemoveEmptyEntries);
                float[] point = new float[2];
                point[0] = float.Parse(pointStr[0]);
                point[1] = float.Parse(pointStr[1]);
                points[i] = point;
            }

            for (int i = 0; i < points.Length; i++)
            {
                Console.WriteLine(IsPointInCircle(points[i], centerCircle, R));
            }

        }
    }
}
